package com.grierforensics.danesmimeatoolset

import java.security.cert.X509Certificate

import com.grierforensics.danesmimeatoolset.model.Email
import com.grierforensics.danesmimeatoolset.service.{DaneSmimeService, EmailSender}
import com.grierforensics.danesmimeatoolset.util.ConfigHolder._
import org.bouncycastle.cert.dane.DANEEntry
import org.bouncycastle.pkix.jcajce.JcaPKIXIdentity
import org.scalatest._

class EmailTests extends FunSuite with BeforeAndAfterAll {

  val testDss = new TestDaneSmimeService

  val testName: String = "DST Test"
  val testAddress: String = "dst.test@example.com"
  val testIdentity: JcaPKIXIdentity = testDss.generateIdentity(testName, testAddress)

  val bobName: String = "Bob"
  val bobAddress: String = "dst.bob@example.com"
  val bobIdentity: JcaPKIXIdentity = testDss.generateIdentity(bobName, bobAddress)

  val aliceName: String = "alice"
  val aliceAddress: String = "dst.alice@example.com"
  val aliceIdentity: JcaPKIXIdentity = testDss.generateIdentity(aliceName, aliceAddress)



  test("fetch DANE Entry") {
    val cert: Option[X509Certificate] = testDss.fetchCert("danetest@had-pilot.biz")
    assert(cert.isDefined)
  }


  test("create DANE Entry") {
    val testDane1: DANEEntry = testDss.createDANEEntry(testAddress, testIdentity.getX509Certificate)
    assert(testDane1.getDomainName == "983b78920cb8dd3c427c69bac530000ccebf77b5fa9644dbc0274120._smimecert.example.com")
    println(testDss.getDANEEntryZoneLine(testDane1))

    val bobDane: DANEEntry = testDss.createDANEEntry(bobAddress, bobIdentity.getX509Certificate)
    assert(bobDane.getDomainName == "1c1321d7ce63c1a904418c3f8d5fe654d8e25de169ce8f342c2b23ef._smimecert.example.com")
    println(testDss.getDANEEntryZoneLine(bobDane))

    val aliceDane: DANEEntry = testDss.createDANEEntry(aliceAddress, aliceIdentity.getX509Certificate)
    assert(aliceDane.getDomainName == "cc279450ef086f0f8eea2ff81966c9864806c9401c277c055531b493._smimecert.example.com")
    println(testDss.getDANEEntryZoneLine(aliceDane))

    val testDane2 = testDss.createDANEEntry(testAddress, testDane1.getCertificate.getEncoded)
    assert(testDss.getDANEEntryZoneLine(testDane2) == testDss.getDANEEntryZoneLine(testDane1))
  }


  test("send email") {
    val sender = EmailSender

    //smoke test
    val email = Email(Some(testName), testAddress, Some(bobName), bobAddress, "secret subject", "secret message")
    sender.send(testDss.sign(email, testIdentity))
    sender.send(testDss.signAndEncrypt(email, testIdentity))
  }


  //todo: implement test("receive email")


  val sampleDaneSmimeZoneLine1 = """b14e06132f0c359080e7f2f55946995f22a6ad14e0528c48906fb128._smimecert.had-pilot.biz
  val sampleDaneSmimeZoneLine
}







